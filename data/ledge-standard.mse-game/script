############################################################## Localization

include file: language

############################################################## Sorting energy symbols

# correctly sort an energy symbol
energy_sort       := sort_text@(order: "XYZI[0123456789]SCE")

# Like energy filter, only also allow up / down symbols:
updown_filter := sort_text@(order: "<UD>")
energy_filter_t := replace@(               # Remove [] used for forcing energy symbols
			match: "[\\[\\]]",
			replace: ""
		) + { updown_filter() + energy_sort() }

############################################################## Determine card color

# Names of colors
color_name := {
	if      input = "R" then "rha"
	else if input = "D" then "dau"
	else if input = "M" then "wim"
	else if input = "P" then "pfi"
	else if input = "Q" then "quae"
	else if input = "V" then "vei"
	else if input = "E" then "ela"
	else if input = "B" then "biz"
	else if input = "Y" then "yun"
	else if input = "J" then "jutu"
	else if input = "G" then "glei"
	else if input = "S" then "sace"
	else if input = "O" then "ohm"
	else if input = "W" then "wry"
	else                     ""
}
color_names_1 := { color_name(colors.0) }
color_names_2 := { color_name(colors.0) + ", " + color_name(colors.1) }
color_names_3 := { color_name(colors.0) + ", " + color_name(colors.1) + ", " + color_name(colors.2) }

# color based on energy cost, input = an energy cost
color_filter  := sort_text@(order: "<RDMPQVEBYJGSOW>")
energy_to_color := {
	count  := number_of_items(in: colors)

	if      count == 0 then  "colorless"
	else if count == 1 then  color_names_1()
	else if count == 2 then  color_names_2() + ", dual-color"
	else if count == 3 then  color_names_3() + ", tri-color"
	else                     "all-colors"
}

# color based on keywords text box, input = textbox contents
color_text_filter :=
	# remove activation costs
	replace@(
		match: "<sym[^>]*>[^<]+</sym[^>]*>"
		in_context: "(?ix) (\\n|^)[^:]*<match>(,|:) | (pays?|additional|costs?)[ ]<match>",
		replace: ""
	) +
	# keep only energy
	filter_text@(match: "<sym[^>]*>([^<]+)") + color_filter;
# get the source frame for a "RDMPQVEBYJGSOW"-style input.
source_multicolor := {
	count  := number_of_items(in: colors)
	if      count == 0 then "source"
	else if count == 1 then color_names_1() + ", source"
	else if count == 2 then color_names_2() + ", source"
	else if count == 3 then color_names_3() + ", source"
	else                    "source, all-colors"
}
source_to_color := {
	# Based on watermark
	if      watermark = "energy symbol rha" then "rha, source"
	else if watermark = "energy symbol dau"  then "dau, source"
	else if watermark = "energy symbol wim" then "wim, source"
	else if watermark = "energy symbol pfi"   then "pfi, source"
	else if watermark = "energy symbol quae" then "quae, source"
	else if watermark = "energy symbol vei" then "vei, source"
	else if watermark = "energy symbol ela" then "ela, source"
	else if watermark = "energy symbol biz" then "biz, source"
	else if watermark = "energy symbol yun" then "yun, source"
	else if watermark = "energy symbol jutu" then "jutu, source"
	else if watermark = "energy symbol glei" then "glei, source"
	else if watermark = "energy symbol sace" then "sace, source"
	else if watermark = "energy symbol ohm" then "ohm, source"
	else if watermark = "energy symbol wry" then "wry, source"
	else source_multicolor(colors:color_text_filter(input: card.rule_text))
};

# Look for a CDA that defines colors
text_to_color := {
	# Note: running filter_text is quite slow, do a quick 'contains' check first
	if contains(match: card_name) then (
	  text := filter_text(match: "is (colorless|all colors|((rha|dau|wim|pfi|quae|vei|ela|biz|yun|jutu|glei|sace|ohm|wry)((,|,? and) (rha|dau|wim|pfi|quae|vei|ela|biz|yun|jutu|glei|sace|ohm|wry))*))", in_context: regex_escape(card_name)+"(</[-a-z]+>)* <match>\\.")
	  if text != "" then (
	    if contains(text, match: "all colors") then (
		colors := "RDMPQVEBYJGSOW"
		if source = "source" then source_multicolor()
		else energy_to_color()
	    ) else (
		colors := ""
		if contains(text, match: "rha" ) then colors := colors + "R"
		if contains(text, match: "dau" ) then colors := colors + "D"
		if contains(text, match: "wim" ) then colors := colors + "M"
		if contains(text, match: "pfi" ) then colors := colors + "P"
		if contains(text, match: "quae") then colors := colors + "Q"
		if contains(text, match: "vei" ) then colors := colors + "V"
		if contains(text, match: "ela" ) then colors := colors + "E"
		if contains(text, match: "biz" ) then colors := colors + "B"
		if contains(text, match: "yun" ) then colors := colors + "Y"
		if contains(text, match: "jutu") then colors := colors + "J"
		if contains(text, match: "glei") then colors := colors + "G"
		if contains(text, match: "sace") then colors := colors + "S"
		if contains(text, match: "ohm" ) then colors := colors + "O"
		if contains(text, match: "wry" ) then colors := colors + "W"

		if source = "source" then source_multicolor()
		else energy_to_color()
	    )
	  )
	)
}

# The color of a card
is_creature    := match@(match: "(?i)Creature")
is_construct   := match@(match: "(?i)Construct")
is_source      := match@(match: "(?i)Source")
is_magic	   := match@(match: "(?i)Magic")
is_wild	       := match@(match: "(?i)Wild")
card_color := {
	# usually the color of energy
	text_color := text_to_color(rules_text, source: is_source(keyword));
	if text_color == "" then (
		energy_color := energy_to_color(colors: color_filter(base_cost))
		if      energy_color == "colorless" and is_source    (keyword)  then source_to_color(watermark)
		else if energy_color == "colorless" and is_construct(keyword)  then "construct"
		else energy_color
	)
	else text_color
};

# Number of colors in a card_color
card_color_color_count := count_chosen@(choices: "rha,dau,wim,pfi,quae,vei,ela,biz,yun,jutu,glei,sace,ohm,wry")
# Clean up color field
card_color_filter := {
	colors := card_color_color_count()
	if colors > 1 then (
		input := require_choice(choices: "dual-color, tri-color, all-colors, no-colors, source")
		input := exclusive_choice(choices: "dual-color, tri-color, all-colors, no-colors")
	) else
	input
}

# needed by all style files anyway
include file: /ledge-standard-blends.mse-include/new-blends

############################################################## Card number

# Index for sorting, rha cards are first, so rha->A, dau->B, .. ,
sort_index := {
	color_of_card() +
	":"
}
# Process the name for sorting rules
sort_name :=
	# Remove "The", "A", and "And" at the beginning
	replace@(match: "^(The|An?) ", replace: "") +
	# Remove commas and apostrophes
	replace@(match: "(,|'|’)", replace: "") +
	# Remove bold and italic tags
	replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
	# Make lowercase
	to_lower

is_dual := { chosen(choice: "dual-color") }
is_tri := { chosen(choice: "tri-color") }
is_null_cost  := { input == "" or input == "0" }

# A code for the color of the card
color_of_card := {
	card_color := card.card_color
	base_cost := card.base_cost
	keyword := card.keyword
	if is_null_cost(base_cost) then (								 # Cards with no or zero costs.
		if chosen(choice: "colorless", card_color) then "A"              # Clear Colorless
		else if is_dual(card_color) or is_tri(card_color) then "B"             # dual
		else if chosen(choice: "rha",  card_color) then "C"              
		else if chosen(choice: "dau",  card_color) then "D"              
		else if chosen(choice: "wim",  card_color) then "E"              
		else if chosen(choice: "pfi",  card_color) then "F"              
		else if chosen(choice: "quae", card_color) then "G"              
		else if chosen(choice: "vei",  card_color) then "H"              
		else if chosen(choice: "ela",  card_color) then "I"              
		else if chosen(choice: "biz",  card_color) then "J"              
		else if chosen(choice: "yun",  card_color) then "K"              
		else if chosen(choice: "jutu", card_color) then "L"              
		else if chosen(choice :"glei", card_color) then "M"              
		else if chosen(choice: "sace", card_color) then "N"              
		else if chosen(choice: "ohm",  card_color) then "O"
		else if chosed(choice: "wry",  card_color) then "P"
		else "P"
	) else (
																		 # Cards with costs.
		colors := sort_text(base_cost, order: "<RDMPQVEBYJGSOW>")
			 if colors == ""  then "A"                                   # Clear Colorless
		else if contains(colors, match: "R") then "C"                                   
		else if contains(colors, match: "D") then "D"                                   
		else if contains(colors, match: "M") then "E"                                   
		else if contains(colors, match: "P") then "F"                                   
		else if contains(colors, match: "Q") then "G"                                   
		else if contains(colors, match: "V") then "H"                                   
		else if contains(colors, match: "E") then "I"                                   
		else if contains(colors, match: "B") then "J"                                   
		else if contains(colors, match: "Y") then "K"                                   
		else if contains(colors, match: "J") then "L"                                   
		else if contains(colors, match: "G") then "M"                                   
		else if contains(colors, match: "S") then "N"                                   
		else if contains(colors, match: "O") then "O"
		else if contains(colors, match: "W") then "P"
		else "P"														
	)
}

rarity_sort := {
	if card.shape == "token" then "T1"
	else if card.shape == "emblem" then "T2"
	else if card.shape == "rulestip" then "T3"
	else if card.shape == "counter" then "T4"
	else if card.shape == "checklist" then "T5"
	else if set.sort_special_rarity == "with the rest" or card.rarity != "special" then " "
	else "S"
}
set_filter := {
	# TODO: what about rulestips?
	if card.shape == "token" or card.shape == "emblem" then
		{ card.shape == "token" or card.shape == "emblem" }
	else if card.shape == "rulestip" then
		{ card.shape == "rulestip" }
	else if card.shape == "counter" then
		{ card.shape == "counter" }
	else if card.shape == "checklist" then
		{ card.shape == "checklist" }
	else if set.sort_special_rarity != "separate numbering" then
		{ card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist"}
	else if card.rarity == "special" then
		{ card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist" and card.rarity == "special" }
	else
		{ card.shape != "token" and card.shape != "emblem" and card.shape != "rulestip" and card.shape != "counter" and card.shape != "checklist" and card.rarity != "special" }
}

card_number := {
	position (
		of: card
		in: set
		order_by: { rarity_sort() + sort_index() + sort_name(card.name) }
		filter:   set_filter()
	) + 1
}
card_count := {
	number_of_items(in: set, filter: set_filter())
}

#Starting with M15, zero digits in card numbers should be shown up to three.
card_number_m15 := { (if card_number() < 100 then "0" else "") + (if card_number() < 10 then "0" else "") + card_number() }
card_count_m15 := { (if card_count() < 100 then "0" else "") + (if card_count() < 10 then "0" else "") + card_count() }

# used by pack scripts
is_token_card   := { card.shape == "token" or card.shape == "rulestip" or card.shape == "counter" or card.shape == "checklist" or card.shape == "emblem"}
is_shifted_card := { contains(card.shape, match:"shifted") }

############################################################## Utilities for keywords

# Replace spaces by a spacer
separate_words := remove_tags + trim + replace@(match:" ", replace: {spacer})

# replaces — correctly
add := "" # default is nothing

# If the 'input' parameter is a energy costs, then adds 'add'
for_energy_costs := format_cost := {
	if input.separator_before == "—" and contains(input.param, match: " ") then (
		if contains(input.param, match:",") then (
			if match(match: "^[RDMPQVEBYJGSOW0-9/|]+,", input.param) then
				"{add}<param-cost>{combined_cost(input.param)}</param-cost>"
			else "<param-cost>{combined_cost(input.param)}</param-cost>"
		) else
			"<param-cost>{alternative_cost(input.param)}</param-cost>"
	) else
		"{add}<param-energy>{input.param}</param-energy>"
}

# Convert first character to lower case
alternative_cost := replace@(match:"^[A-Z]", replace: { to_lower() })

#
combined_cost := replace@(match:", [A-Z]", replace: { to_lower() })+
	replace@(match:",", replace:" and")+
	replace@(match:"^[RDMPQVEBYJGSOW0-9/|]", in_context: "(^|[[:space:]])<match>", replace: "<sym-auto>&</sym-auto>")+
	replace@(match:"^[A-Z]", replace: { to_lower() })

long_dash := replace@(match:"-", replace:"—")

# Utilities for keywords

has_pc := { card.base_cost != "" }

contains_target := match@(match:"(?i)([^a-z]|^)target([^a-z]|$)")

is_targeted := { contains_target(card.rule_text) }

color_to_energy :=	replace@(match: "rha",  replace: "[R]")+
					replace@(match: "dau",  replace: "[D]")+
					replace@(match: "wim",  replace: "[M]")+
					replace@(match: "pfi",  replace: "[P]")+
					replace@(match: "quae", replace: "[Q]")+
					replace@(match: "vei",  replace: "[V]")+
					replace@(match: "ela",  replace: "[E]")+
					replace@(match: "biz",  replace: "[B]")+
					replace@(match: "yun",  replace: "[Y]")+
					replace@(match: "jutu", replace: "[J]")+
					replace@(match: "glei", replace: "[G]")+
					replace@(match: "sace", replace: "[S]")+
					replace@(match: "ohm",  replace: "[O]")+
					replace@(match: "wry",  replace: "[W]")

############################################################## The text box

# Filters for the text box
# context in which energy symbols are found
energy_context :=
	"(?ix)				# case insensitive, ignore whitespace
	 (^|[[:space:]\"(“'])		# start of a word
	 (  <match>:			# G: something
	 |  <match>,			# G, down: something
	 |  <match>[ ]can[ ]be[ ]pay
	 |  (pays?|additional|costs?|the	# pay X. creatures cost 1 less. pay an additional G.
	    |adds?|pay(ed)?[ ](with|using)
	    )
	    ([ ]either)?			 # pay either X or Y
	    ([ ](<sym[^>]*>)?[RDMPQVEBYJGSOW0-9/|]+(</sym[^>]*>)?,)* # pay X, Y or Z
	    ([ ](<sym[^>]*>)?[RDMPQVEBYJGSOW0-9/|]+(</sym[^>]*>)?[ ](and|or|and/or))* # pay X or Y
	    [ ]<match>
	    ([,.)]|$				# (end of word)
	    |[ ][^ .,]*$			# still typing...
	    |[ ]( or | and | in | less | more | to ) # or next word is ...
	    )
	    )
	 |  <param-energy><match></param-energy>		# keyword argument that is declared as energy
	 |  <param-cost>[ ]*<match></param-cost>	# keyword argument that is declared as cost
	 |  <param-cost><match>,			# keyword argument that is declared as cost
	 ";

# truncates the name of legends
legend_filter := replace@(match:"(, | of | the ).*", replace: "" )

# these are considered a correct 'word' for spellchecking in the text box:
additional_text_words := match@(match:
	"(?ix)^(?:                         # match whole word
	  <atom-[^>]*>.*?</atom-[^>]*>     # cardnames and stuff
	| [+-]?[0-9X]+ / [+-]?[0-9X]+      # '3/3', '+X/+X'
	)$")

# the rule text filter
#  - adds energy symbols
#  - makes text in parentheses italic
text_filter :=
	# step 1 : remove all automatic tags
	remove_tag@(tag: "<sym-auto>") +
	remove_tag@(tag: "<i-auto>")   +
	remove_tag@(tag: "<b-auto>")   +
	remove_tag@(tag: "<error-spelling") +
	remove_tag@(tag: "<nospellcheck") +
	# step 2 : reminder text for keywords
	expand_keywords@(
		condition: {
			correct_case or (mode != "pseudo" and not used_placeholders)
		}
		default_expand: {
			chosen(choice:if correct_case then mode else "lower case", set.automatic_reminder_text)
		},
		combine: {
			keyword  := "<nospellcheck>{keyword}</nospellcheck>"
			reminder := process_english_hints(reminder)
			if mode == "pseudo" then "<i-auto>{keyword}</i-auto>"
			else keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>"
		}) +
	# step 2b : move action keywords' reminder text to the end of the line
	replace@(
		match: "(<atom-reminder-action>(?:(?!<kw-).)*</atom-reminder-action></kw[^>]*>)(((?!<atom-reminder| ?<kw-)[^\n(])+)",
		replace: "\\2\\1"
		) +
	# step 2c : remove duplicate reminder text
	replace@(
		match: "(<atom-reminder-[^>]*>[^)]+[)]</atom-reminder-[^>]*>)([^\n]+)\\1"
		replace: "\\2\\1"
		) +
	# step 3a : expand shortcut word CARDNAME
	replace@(
		match: "CARDNAME",
		in_context: "(^|[[:space:]]|\\()<match>", # TODO: Allow any punctuation before
		replace: "<atom-cardname></atom-cardname>"
		) +
	# step 3b : expand shortcut word LEGENDNAME
	replace@(
		match: "LEGENDNAME",
		in_context: "(^|[[:space:]]|\\()<match>", # TODO: Allow any punctuation before
		replace: "<atom-legname></atom-legname>"
		) +
	# step 3c : fill in atom fields
	tag_contents@(
		tag: "<atom-cardname>",
		contents: { "<nospellcheck>" + (if card_name=="" then "CARDNAME" else card_name) + "</nospellcheck>" }
		) +
	tag_contents@(
		tag: "<atom-legname>",
		contents: { "<nospellcheck>" + (if card_name=="" then "LEGENDNAME" else legend_filter(card_name)) + "</nospellcheck>" }
		) +
	# step 4 : explict non energy symbols
	replace@(
		match: "\\][RDMPQVEBYJGSOW0-9/|]+\\[",
		replace: {"<nosym>" + energy_filter_d() + "</nosym>"} ) +
	# step 5 : add energy & down symbols
	replace@(
		match: "\\b[RDMPQVEBYJGSOW0-9/|]+\\b",
		in_context: energy_context,
		replace: {"<sym-auto>" + energy_filter_d() + "</sym-auto>"} ) +
	# step 5b : add explict energy symbols
	replace@(
		match: "\\[[RDMPQVEBYJGSOW0-9/|]+\\]",
		replace: {"<sym>" + energy_filter_d() + "</sym>"} ) +
	# step 6 : curly quotes
	curly_quotes +
	# step 7 : italicize text in parenthesis
	replace@(
	 	match: "[(]([^)\n]|[(][^)\n]*[)])*[)]?",
		in_context: "(^|[[:space:]])<match>|<atom-keyword><match></",
	 	replace: "<i-auto>&</i-auto>") +
	# step 8 : automatic capitalization, but not after "("
	replace@(
		match: "([ ]*: |—| — )" # preceded by this
		     + "([[:lower:]])" # match this
		     + "(?![)])",      # not followed by this
		replace: { _1 + to_upper(_2) }) +
	# step 9 : spellcheck
	{ if set.mark_errors then
		check_spelling(
			language: language().spellcheck_code,
			extra_dictionary: "/ledge.mse-game/ledge-words",
			extra_match: additional_text_words
		)
	  else input
	}

############################################################## Other boxes

# the flavor text filter
#  - makes all text italic
flavor_text_filter :=
	# step 1 : remove italic tags
	remove_tag@(tag: "<i-flavor>")   +
	# step 2 : surround by <i> tags
	{ "<i-flavor>" + input + "</i-flavor>" } +
	# curly quotes
	curly_quotes +
	# spellcheck
	{ if set.mark_errors
	  then check_spelling(language:language().spellcheck_code)
	  else input
	}

# Move the cursor past the separator in the score and keyword boxes
keyword_over_keyword := replace@(match:" ?[-:]$", replace:"")

undefined_keyword_filter := {
	input := remove_tag(tag: "<word-list-")
	input := keyword_over_keyword()
	tag := "word-list-keyword" # TODO: localize
	"<{tag}>{input}</{tag}>"
}

break_keywords := split_text@(match: " +|<atom-sep>[^<]*</atom-sep>", include_empty:false)
defined_keyword_filter := {
	input := remove_tag(tag: "<word-list-")
	input := remove_tag(tag: "<soft")
	lang  := language()
	# What word list to use?
	list_keyword_rest := if      lang.is_creature(keyword)		then "class"
	                  else if lang.is_source(keyword)			then "source"
	                  else if lang.is_tech(keyword)			then "tech"
	                  else if lang.is_magic(keyword)			then "magic"
	                  else if lang.is_spell(keyword)			then "spell"
	if list_keyword_rest != "" then (
		if lang.is_creature(keyword) then (
			list_keyword_first := "race"
		) else (
			list_keyword_first := list_keyword_rest
		);
		# wrap wordlist tag around each part
		parts := break_keywords()
		(for each i:part in parts do
			if i == 0 then
				"<word-list-{list_keyword_first}>{part}</word-list-{list_keyword_first}>"
			else
				lang.keyword_separator + "<word-list-{list_keyword_rest}>{part}</word-list-{list_keyword_rest}>"
		) +
		(if length(parts) > 0 then
			# Add a new box at the end
			"<soft>{lang.keyword_separator}</soft><word-list-{list_keyword_rest}></word-list-{list_keyword_rest}>"
		 else
			"<word-list-{list_keyword_first}></word-list-{list_keyword_first}>"
		)
	) else input # do nothing
}

# all keywords, for word list
space_to_comma := replace@(match:" ", replace:",")
only_first     := replace@(match:" .*", replace:"")
only_next      := replace@(match:"^[^ ]* ?", replace:"")
all_keywords := {
	for each card in set do
		if contains(card.keyword) then "," + space_to_comma(to_text(card.keyword))
}
all_races := {
	for each card in set do
		if is_creature(card.keyword) then
			"," + only_first(to_text(card.keyword))
}
all_classes := {
	for each card in set do
		if contains(card.keyword, match:"Creature") then
			"," + space_to_comma(only_next(to_text(card.keyword)))
}

# Determine a rarity code for M15 styles.
rarity_code := {
	if is_promo() then "P"
	else if contains(card.shape, match:"token") then "T"
	else if contains(card.shape, match:"emblem") then "E"
	else if card.rarity == "common" then "C"
	else if card.rarity == "uncommon" then "U"
	else if card.rarity == "rare" then "R"
	else if card.rarity == "mythic rare" then "M"
	else if card.rarity == "special" then "S"
	else if card.rarity == "basic source" then "B" }

# Determine if the card is a promo card.
is_promo := { "false" }

# Determine if the card is a rare.
is_rare := { card.rarity == "rare" or card.rarity == "mythic rare" }

# Shape of cards, can be changed in style files
card_shape := { "normal" }

keyword_symbol_for :=
	to_text +
	replace@(match: "(Legendary|Basic|Snow|World| )", replace: "") +
	{ if      input == "Creature"     then "creature"
	  else if input == "Instant"      then "instant"
	  else if input == "Tech"		  then "tech"
	  else if input == "Magic"		  then "magic"
	  else if input == "Source"       then "source"
	  else                                "multi"
	}
keyword_symbol_keyword := { keyword_symbol_for(keyword) }

#Script to make ledge-energy-future compatible w/ other templates
colorless_color := {
		if contains(card.card_color, match:"dual-color") or contains(card.card_color, match:"tri-color") then "c"
		else if card.card_color=="rha"  then "r"
		else if card.card_color=="dau"  then "d"
		else if card.card_color=="wim"  then "m"
		else if card.card_color=="pfi"  then "p"
		else if card.card_color=="quae" then "q"
		else if card.card_color=="vei"  then "v"
		else if card.card_color=="ela"  then "e"
		else if card.card_color=="biz"  then "b"
		else if card.card_color=="yun"  then "y"
		else if card.card_color=="jutu" then "j"
		else if card.card_color=="glei" then "g"
		else if card.card_color=="sace" then "s"
		else if card.card_color=="ohm"  then "o"
		else if card.card_color=="wry"  then "w"
		else "c"
	}

#Indicators never appear if the indicator would be colorless, colorless source, or colorless tech.
#Indicators do appear if the chosen frame doesn't match the default.
#Indicators do appear if the chosen color for the indicator doesn't match the default.

has_identity := { ( ( card.card_color != card_color(base_cost: card.base_cost, rules_text: card.rule_text, keyword: card.keyword, watermark: card.watermark, card_name: card.name, default: "colorless") ) or ( card.indicator != card_color(base_cost: card.base_cost, rules_text: card.rule_text, keyword: card.keyword, watermark: card.watermark, card_name: card.name, default: "colorless") ) ) and card.indicator != "colorless" and card.indicator != "tech" and card.indicator != "source"}

has_identity_2 := { ( ( card.card_color_2 != card_color(base_cost: card.base_cost_2, rules_text: card.rule_text_2, keyword: card.keyword_2, watermark: card.watermark_2, card_name: card.name_2, default: "colorless") ) or ( card.indicator_2 != card_color(base_cost: card.base_cost_2, rules_text: card.rule_text_2, keyword: card.keyword_2, watermark: card.watermark_2, card_name: card.name_2, default: "colorless") ) ) and card.indicator_2 != "colorless" and card.indicator_2 != "tech" and card.indicator_2 != "source"}

############################################################## Statistics utilities

# Converted energy cost
is_colored_energy := match@(match: "[RDMPQVEBYJGSOW]")
only_numbers    := filter_text@(match: "^[0123456789]+")
cost_split := break_text@(match: "(?ix) 1/2 | [|][RDMPQVEBYJGSOW] | [0-9]+(?!/[RDMPQVEBYJGSOW]) | [RDMPQVEBYJGSOW0-9](/[RDMPQVEBYJGSOW])\{0,4} ")
base_cost := {to_number(
	for each sym in cost_split(to_text()) do (
		numbers := only_numbers(sym)
		if is_half_energy(sym)  then 0.5
		else if numbers != "" then to_int(numbers)
		else                       1 # all other symbols are 1
	))
}

colored_energy := {to_number(
	for each sym in cost_split(to_text()) do (
		numbers := only_numbers(sym)
		if is_colored_energy(sym) then
			if is_half_energy(sym) then 0.5 else 1
		else 0
	))
}

primary_card_color := {
	construct	:= chosen(choice:"construct")
	wild		:= chosen(choice:"wild")
	magic		:= chosen(choice:"magic")
	dual		:= chosen(choice:"dual-color")
	tri			:= chosen(choice:"tri-color")
	quad		:= chosen(choice:"quad-color")
	hex			:= chosen(choice:"hex-color")
	none		:= chosen(choice:"none")
	all			:= chosen(choice:"all")
	source		:= chosen(choice:"source")
	rha			:= chosen(choice:"rha" )
	dau			:= chosen(choice:"dau" )
	wim		    := chosen(choice:"wim" )
	pfi			:= chosen(choice:"pfi" )
	quae		:= chosen(choice:"quae")
	vei			:= chosen(choice:"vei" )
	ela			:= chosen(choice:"ela" )
	biz			:= chosen(choice:"biz" )
	yun			:= chosen(choice:"yun" )
	jutu	    := chosen(choice:"jutu")
	glei		:= chosen(choice:"glei")
	sace		:= chosen(choice:"sace")
	ohm			:= chosen(choice:"ohm" )
	wry			:= chosen(choice:"wry" )

	if      tech		then "tech"
	else if dual		then "dual-color"
	else if tri			then "tri-color"
	else if quad		then "quad-color"
	else if hex			then "hex-color"
	else if magic		then "magic"
	else if wild		then "wild"
	else if none		then "none"
	else if all			then "all"
	else if source		then "source"
	else if rha			then "rha"
	else if dau			then "dau"
	else if wim			then "wim"
	else if pfi			then "pfi"
	else if quae		then "quae"
	else if vei			then "vei"
	else if ela			then "ela"
	else if biz			then "biz"
	else if yun			then "yun"
	else if jutu		then "jutu"
	else if glei		then "glei"
	else if sace		then "sace"
	else if ohm			then "ohm"
	else if wry			then "wry"
	else                   input
}

word_count := break_text@(match:"[^[:space:]]+") + length
line_count := split_text@(match:"\n+",include_empty:false) + length

