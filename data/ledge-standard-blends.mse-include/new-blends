# Scripts for blending images
# Included by a style file in its init script


########################################################################
# Filenames and other defaults
########################################################################

mask_dual_source_with_color	:= { false }
mask_tri_source_with_color	:= { false }
mask_quad_source_with_color	:= { false }
mask_hex_source_with_color	:= { false }
template		:= { input + "{type}.jpg" }
source_template		:= { (if input == "n" then "c" else input) + "s{type}.jpg" }
# Are there templates for colored sources, source_template(...)?
colored_sources           := true

########################################################################
# Combining multiple colors
########################################################################

horizontal_card_multi := [
	1: { template(colors[0]) }
	2: { linear_blend(
			image1: template(colors[0])
			image2: template(colors[1])
			x1: 0.4,  y1: 0
			x2: 0.6,  y2: 0
		 )
		}
	3: {linear_blend(
		image1: template(colors[0])
		x1: 0.22,  y1: 0
		x2: 0.4,   y2: 0
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 0.6,   y1: 0
		  x2: 0.78,  y2: 0
		  image2: template(colors[2])
	   ))}
	4: {linear_blend(
		# blend = 0.16
		image1: template(colors[0])
		x1: 0.15,  y1: 0
		x2: 0.31,  y2: 0
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 0.42,  y1: 0
		  x2: 0.58,  y2: 0
		  image2: linear_blend(
			image1: template(colors[2])
			x1: 0.69, y1: 0
			x2: 0.85, y2: 0
			image2: template(colors[3])
	   )))}
	6: {linear_blend(
		image1: template(colors[0])
		x1: 1.5 / 15,  y1: 0
		x2: 3.1 / 15,  y2: 0
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 4.1 / 15,  y1: 0
		  x2: 5.7 / 15,  y2: 0
		  image2: linear_blend(
			image1: template(colors[2])
			x1: 6.7 / 15,  y1: 0
			x2: 8.3 / 15,  y2: 0
			image2: linear_blend(
			  image1: template(colors[3])
			  x1: 9.3 / 15,  y1: 0
			  x2: 10.9 / 15,  y2: 0
			  image2: linear_blend(
				image1: template(colors[4])
				x1: 11.9 / 15, y1: 0
				x2: 13.5 / 15, y2: 0
				image2: template(colors[5])
	   )))))}

]


########################################################################
# Scores box
########################################################################
# These are easier

horizontal_score_multi := [
	1: { template(colors[0]) }
	2: { template(colors[1]) }
	3: { linear_blend(
		image1: template(colors[1])
		image2: template(colors[2])
		x1: -0.51, y1: 0
		x2:  0.26, y2: 0
	   )}
	4: { linear_blend(
		image1: template(colors[2])
		image2: template(colors[3])
		x1: -0.1,  y1: 0
		x2:  0.6,  y2: 0
	   )}
	6: { linear_blend(
		image1: template(colors[4])
		image2: template(colors[5])
		x1: 0.07, y1: 0
		x2: 0.7, y2: 0
	   )}
]



########################################################################
# Color Identity Marking
########################################################################

identity_horizontal_multi := [
	0: { template("c") }
	1: { template(colors[0]) }
	2: { linear_blend(
		image1: template(colors[0])
		image2: template(colors[1])
		x1: 0.49,  y1: 0.49
		x2: 0.5,  y2: 0.5
	   )}
	3: {linear_blend(
		image1: template(colors[0])
		x1: 0.39,  y1: 0.39
		x2: 0.4,   y2: 0.4
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 0.6,   y1: 0.6
		  x2: 0.61,  y2: 0.61
		  image2: template(colors[2])
	   ))}
	4: {linear_blend(
		# blend = 0.16
		image1: template(colors[0])
		x1: 0.29,  y1: 0.29
		x2: 0.3,  y2: 0.3
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 0.49,  y1: 0.49
		  x2: 0.50,  y2: 0.5
		  image2: linear_blend(
			image1: template(colors[2])
			x1: 0.69, y1: 0.69
			x2: 0.7, y2: 0.7
			image2: template(colors[3])
	   )))}
	   # below not correct
	6: {linear_blend(
		# blend = 0.16
		image1: template(colors[0])
		x1: 0.29,  y1: 0.29
		x2: 0.3,  y2: 0.3
		image2: linear_blend(
		  image1: template(colors[1])
		  x1: 0.49,  y1: 0.49
		  x2: 0.50,  y2: 0.5
		  image2: linear_blend(
			image1: template(colors[2])
			x1: 0.69, y1: 0.69
			x2: 0.7, y2: 0.7
			image2: template(colors[3])
	   )))}
	12: { template("a") }
]

########################################################################
# Putting it all together.
########################################################################

# Determine the card background based on the card_color multiple choice options
color_background := {

	# for thumbnails
	#if input == "multi" then
		input := "rha,quae,yun,{multi_previews},horizontal"
	#else if input == "horizontal" then
	#	input := "rha,quae,yun,{multi_previews}," + input


	# What type of 'multi-color'?
	mono	:= chosen(choice:"mono-color")
	dual    := chosen(choice:"dual-color")
	tri		:= chosen(choice:"tri-color")
	quad	:= chosen(choice:"quad-colors")
	hex		:= chosen(choice:"hex-colors")
	all		:= chosen(choice:"all-colors")
	none	:= chosen(choice:"no-colors")
	if source and colored_sources then template := source_template # use source template instead?

	# The selected colors
	colors := sort_text( order: "(RDMPQVEBYJGSOW)"
					   + (if chosen(choice:"rha" )  then "R")
					   + (if chosen(choice:"dau" )  then "D")
					   + (if chosen(choice:"wim" )  then "M")
					   + (if chosen(choice:"pfi" )  then "P")
					   + (if chosen(choice:"quae")  then "Q")
					   + (if chosen(choice:"vei" )  then "V")
					   + (if chosen(choice:"ela" )  then "E")
					   + (if chosen(choice:"biz" )  then "B")
					   + (if chosen(choice:"yun" )  then "Y")
					   + (if chosen(choice:"jutu")  then "J")
					   + (if chosen(choice:"glei")  then "G")
					   + (if chosen(choice:"sace")  then "S")
					   + (if chosen(choice:"ohm" )  then "O")
					   + (if chosen(choice:"wry" )  then "W")
					   )
	if dual and colors == "" then (
		colors := colors + "d"
		dual := false
	)

	if tri and colors == "" then (
		colors := colors + "t"
		tri := false
	)

	if all and colors == "" then (
		colors := colors + "a"
		all := false
	)

	if none and colors == "" then (
		colors := colors + "n"
		none := false
	)

	color_count := number_of_items(in: colors)
	if colors == "" then colors == "c"

	# 'shape' / type of multi
	shape := if      chosen(choice:"horizontal") then "horizontal"

	# Determine background (allows styles to hook something else here)
	color_combination()
}

color_combination := {
	# The base multi, without the outer frame blended over it
	base := base_multi[shape][color_count]()

	# Put a frame around it?
	if source and not colored_sources then
		masked_blend(
			mask:  "dual_color_blend_{type}.png",
			dark:  source_template("c"),
			light: base,
		)
	else if source and dual and mask_dual_source_with_color() then
		masked_blend(
			mask:  "dual_color_blend_{type}.png",
			dark:  base,
			light:  source_template("d"),
		)
	else if source and tri and mask_tri_source_with_color() then
		masked_blend(
			mask:  "tri_color_blend_{type}.png",
			dark:  base,
			light:  source_template("t"),
		)
	else if dual and none then
		masked_blend(
			mask: "no_color_blend_{type}.png",
			dark: template("n"),
			light: masked_blend(
				mask: "dual_color_blend_{type}.png",
				dark: template("d"),
				light: base
			)
		)
	else if tri and none then
		masked_blend(
			mask: "no_color_blend_{type}.png",
			dark: template("n"),
			light: masked_blend(
				mask: "tri_color_blend_{type}.png",
				dark: template("t"),
				light: base
			)
		)
	else if dual then
		masked_blend(
			mask:  "dual_color_blend_{type}.png",
			dark:  template("d"),
			light: base,
		)
	else if tri then
		masked_blend(
			mask:  "tri_color_blend_{type}.png",
			dark:  template("t"),
			light: base,
		)
	else if none and color_count > 1 and mask_dual_with_source() then
		masked_blend(
			mask:  "no_color_blend_{type}.png",
			dark:  template("n"),
			light: masked_blend(
				mask: "dual_color_blend_{type}.png",
				dark: template("c"),
				light: base
			)
		)
	else if none and color_count > 1 and mask_tri_with_source() then
		masked_blend(
			mask:  "no_color_blend_{type}.png",
			dark:  template("n"),
			light: masked_blend(
				mask: "tri_color_blend_{type}.png",
				dark: template("c"),
				light: base
			)
		)
	else if none then
		masked_blend(
			mask:  "no_color_blend_{type}.png",
			dark:  template("n"),
			light: base,
		)
	else if color_count > 1 and mask_dual_with_source() then
		masked_blend(
			mask:  "dual_color_blend_{type}.png",
			dark:  source_template("c"),
			light: base,
		)
	else if color_count > 1 and mask_tri_with_source() then
		masked_blend(
			mask:  "tri_color_blend_{type}.png",
			dark:  source_template("c"),
			light: base,
		)
	else base
}

########################################################################
# Specific types
########################################################################

card_background := { color_background(type:"card",     base_multi:horizontal_card_multi) }
card_scbox      := { color_background(type:"score",    base_multi:horizontal_score_multi) }
#card_textbox    := { color_background(type:"textbox",  base_multi:textbox_multi) }
card_identity   := { color_background(type:"identity", base_multi:identity_horizontal_multi) }

########################################################################
# Font colors
########################################################################

# For which colors is the font white?
font_colors_white := { input == "b" or input == "l" }

font_color_positions := [
	horizontal: [0,0,0,0,0,0,0,0]
]

# Determine whether light or dark fonts should be used
font_white := {
	dual	:= chosen(choice:"dual")
	tri		:= chosen(choice:"tri")
	quad	:= chosen(choice:"quad")
	hex		:= chosen(choice:"hex")
	all		:= chosen(choice:"all")
	none	:= chosen(choice:"none")
	colors	:= sort_text( order: "(RDMPQVEBYJGSOW)"
				   , (if chosen(choice:"rha" )  then "R")
				   + (if chosen(choice:"dau" )  then "D")
				   + (if chosen(choice:"wim" )  then "M")
				   + (if chosen(choice:"pfi" )  then "P")
				   + (if chosen(choice:"quae")  then "Q")
				   + (if chosen(choice:"vei" )  then "V")
				   + (if chosen(choice:"ela" )  then "E")
				   + (if chosen(choice:"biz" )  then "B")
				   + (if chosen(choice:"yun" )  then "Y")
				   + (if chosen(choice:"jutu")  then "J")
				   + (if chosen(choice:"glei")  then "G")
				   + (if chosen(choice:"sace")  then "S")
				   + (if chosen(choice:"ohm" )  then "O")
				   + (if chosen(choice:"wry" )  then "W")
				   + (if none					then "N")
				   )
	font_colors_white(
		if chosen(choice:"source")			then "u"
		else if input == "none, dual"		then "n"
		else if chosen(choice:"dual")		then "d"
		else if chosen(choice:"tri")		then "t"
		else if chosen(choice:"quad")		then "q"
		else if chosen(choice:"hex")		then "h"
		else if chosen(choice:"all")		then "a"
		else if chosen(choice:"none")		then "n"
		else if none and not (dual or tri)  then "n"
		else if colors == ""                then "c"
		else colors[
			font_color_positions[
				if      chosen(choice:"horizontal") then "horizontal"
			][number_of_items(in: colors)]
		]
	)
}

font_color := { if font_white() then rgb(255,255,255) else rgb(0,0,0) }
